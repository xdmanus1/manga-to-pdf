name: Build and Release Manga to PDF

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pip install pyinstaller
          if [ "${{ runner.os }}" == "Windows" ]; then
            pyinstaller --onefile --noconsole --name manga_to_pdf mangatopdf.py
          else
            pyinstaller --onefile --name manga_to_pdf mangatopdf.py
          fi
        shell: bash

      - name: Determine latest version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0")
          CURRENT_VERSION=${LATEST_TAG#v}
          NEW_VERSION=$((CURRENT_VERSION + 1))
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        shell: bash

      - name: Prepare Release Asset
        run: |
          mkdir release-asset
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv dist/manga_to_pdf.exe release-asset/manga_to_pdf-v${{ env.NEW_VERSION }}-windows.exe
          else
            mv dist/manga_to_pdf release-asset/manga_to_pdf-v${{ env.NEW_VERSION }}-linux
            chmod +x release-asset/manga_to_pdf-v${{ env.NEW_VERSION }}-linux
          fi
        shell: bash

      - name: Create Release Description
        run: |
          echo "Manga to PDF Converter - v${{ env.NEW_VERSION }}-${{ runner.os }}" > release_description.md
          echo "" >> release_description.md
          echo "This release includes the executable for ${{ runner.os }}." >> release_description.md
          echo "" >> release_description.md
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "## Windows" >> release_description.md
            echo "1. Download the 'manga_to_pdf-v${{ env.NEW_VERSION }}-windows.exe' file." >> release_description.md
            echo "2. Double-click the downloaded file to run the application." >> release_description.md
            echo "   The application will start without opening a command prompt window." >> release_description.md
          else
            echo "## Linux" >> release_description.md
            echo "1. Download the 'manga_to_pdf-v${{ env.NEW_VERSION }}-linux' file." >> release_description.md
            echo "2. Open a terminal in the directory containing the downloaded file." >> release_description.md
            echo "3. Make the file executable (if it isn't already):" >> release_description.md
            echo "   \`chmod +x manga_to_pdf-v${{ env.NEW_VERSION }}-linux\`" >> release_description.md
            echo "4. Run the program with:" >> release_description.md
            echo "   \`./manga_to_pdf-v${{ env.NEW_VERSION }}-linux\`" >> release_description.md
            echo "" >> release_description.md
            echo "Note: If you encounter any issues with the Tkinter UI, ensure you have the following packages installed:" >> release_description.md
            echo "- On Ubuntu/Debian: \`sudo apt-get install python3-tk\`" >> release_description.md
            echo "- On Fedora: \`sudo dnf install python3-tkinter\`" >> release_description.md
            echo "- On Arch Linux: \`sudo pacman -S tk\`" >> release_description.md
          fi
          echo "" >> release_description.md
          echo "For more details, please refer to the project documentation." >> release_description.md
        shell: bash

      - name: Create Git Tag
        run: |
          TAG_NAME="v${{ env.NEW_VERSION }}-${{ runner.os }}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $TAG_NAME
          git push origin $TAG_NAME
        shell: bash

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          body_path: release_description.md
          files: release-asset/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
